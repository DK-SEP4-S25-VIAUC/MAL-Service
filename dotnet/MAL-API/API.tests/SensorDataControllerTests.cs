using NUnit.Framework;
using Moq;
using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using API.Controllers;
using API.Services.SensorDataService;

namespace API.Tests
{
    // Tests autogenerated by ChatGPT
    [TestFixture]
    public class SensorDataControllerTests
    {
        private Mock<ISensorDataService> _mockSensorDataService;
        private Mock<ILogger<SensorDataController>> _mockLogger;
        private SensorDataController _controller;

        [SetUp]
        public void Setup()
        {
            _mockSensorDataService = new Mock<ISensorDataService>();
            _mockLogger = new Mock<ILogger<SensorDataController>>();

            _controller = new SensorDataController(
                _mockSensorDataService.Object,
                _mockLogger.Object
            );
        }

        [Test]
        public async Task GetSamplesAsync_ReturnsOkResult_WhenServiceReturnsData()
        {
            // Arrange
            var mockResult = new OkObjectResult(new { list = new List<object>() });

            _mockSensorDataService
                .Setup(s => s.getSamples(It.IsAny<DateTime?>(), It.IsAny<DateTime?>()))
                .ReturnsAsync(mockResult);

            // Act
            var result = await _controller.GetSamplesAsync(null, null);

            // Assert
            Assert.That(result, Is.TypeOf<OkObjectResult>());
        }

        [Test]
        public async Task GetSamplesAsync_Returns500_WhenServiceThrowsException()
        {
            // Arrange
            _mockSensorDataService
                .Setup(s => s.getSamples(It.IsAny<DateTime?>(), It.IsAny<DateTime?>()))
                .ThrowsAsync(new Exception("Test exception"));

            // Act
            var result = await _controller.GetSamplesAsync(null, null);

            // Assert
            var objectResult = result as ObjectResult;
            Assert.That(objectResult, Is.Not.Null);
            Assert.That(objectResult?.StatusCode, Is.EqualTo(500));
        }
    }
}
