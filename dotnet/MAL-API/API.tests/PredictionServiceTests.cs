using NUnit.Framework;
using Moq;
using Moq.Protected;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using API.Services.PredictionService;
using API.DataEntities;

namespace API.Tests
{
    //Test generated by ChatGPT
    [TestFixture]
    public class PredictionServiceTests
    {
        private Mock<HttpMessageHandler> _mockHttpMessageHandler;
        private HttpClient _httpClient;
        private IConfiguration _mockConfiguration;
        private PredictionService _service;

        [SetUp]
        public void Setup()
        {
            _mockHttpMessageHandler = new Mock<HttpMessageHandler>();

            _httpClient = new HttpClient(_mockHttpMessageHandler.Object)
            {
                BaseAddress = new Uri("https://example.com/api/")
            };

            var inMemorySettings = new Dictionary<string, string>
            {
                {"PredictionService:SoilHumidityApiKey", "fake-key"}
            };
            _mockConfiguration = new ConfigurationBuilder()
                .AddInMemoryCollection(inMemorySettings!)
                .Build();

            _service = new PredictionService(_httpClient, _mockConfiguration);
        }

        [Test]
        public async Task GetPredictionAsync_ReturnsForecastDTO_WhenValidResponse()
        {
            // Arrange
            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new StringContent("Prediction: 59", Encoding.UTF8, "application/json")
            };

            _mockHttpMessageHandler
                .Protected()
                .Setup<Task<HttpResponseMessage>>(
                    "SendAsync",
                    ItExpr.IsAny<HttpRequestMessage>(),
                    ItExpr.IsAny<CancellationToken>()
                )
                .ReturnsAsync(response);

            // Act
            var result = await _service.GetPredictionAsync(45.0);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result.next_watering_time, Is.EqualTo(59));
        }

        [Test]
        public void GetPredictionAsync_Throws_WhenStatusCodeIsNotSuccess()
        {
            var response = new HttpResponseMessage(HttpStatusCode.BadRequest);
            _mockHttpMessageHandler
                .Protected()
                .Setup<Task<HttpResponseMessage>>("SendAsync", 
                    ItExpr.IsAny<HttpRequestMessage>(), 
                    ItExpr.IsAny<CancellationToken>())
                .ReturnsAsync(response);

            Assert.ThrowsAsync<Exception>(async () =>
            {
                await _service.GetPredictionAsync(45.0);
            });
        }

        [Test]
        public void GetPredictionAsync_Throws_WhenNoNumberInResponse()
        {
            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new StringContent("No prediction available", Encoding.UTF8, "application/json")
            };

            _mockHttpMessageHandler
                .Protected()
                .Setup<Task<HttpResponseMessage>>("SendAsync", 
                    ItExpr.IsAny<HttpRequestMessage>(), 
                    ItExpr.IsAny<CancellationToken>())
                .ReturnsAsync(response);

            Assert.ThrowsAsync<Exception>(async () =>
            {
                await _service.GetPredictionAsync(45.0);
            });
        }
        
        [TearDown]
        public void TearDown()
        {
            _httpClient.Dispose();
        }

    }
}
