using NUnit.Framework;
using Moq;
using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

using API.Controllers; // Or RESTApi.Controllers, depending on your namespace
using API.Services.PredictionService;
using API.Services.SensorDataService;
using API.DataEntities;


namespace API.tests;

// Tests autogenerated by ChatGPT
[TestFixture]
public class PredictionControllerTests
{
    private Mock<IPredictionService> _mockPredictionService;
    private Mock<ISensorDataService> _mockSensorDataService;
    private Mock<ILogger<PredictionController>> _mockLogger;
    private PredictionController _controller;

    [SetUp]
    public void SetUp()
    {
        _mockPredictionService = new Mock<IPredictionService>();
        _mockSensorDataService = new Mock<ISensorDataService>();
        _mockLogger = new Mock<ILogger<PredictionController>>();

        _controller = new PredictionController(
            _mockPredictionService.Object,
            _mockSensorDataService.Object,
            _mockLogger.Object
        );
    }

    [Test]
    public async Task GetForecast_ReturnsOk_WhenForecastIsAvailable()
    {
        // Arrange
        _mockSensorDataService.Setup(s => s.getSoilHumiLowerThresholdAsync()).ReturnsAsync(42.0);
        _mockPredictionService.Setup(p => p.GetPredictionAsync(42.0)).ReturnsAsync(new ForecastDTO(120));

        // Act
        var result = await _controller.GetForecast();

        // Assert
        var okResult = result as OkObjectResult;
        Assert.That(okResult, Is.Not.Null);
        Assert.That(okResult.StatusCode, Is.EqualTo(200));
        Assert.That(okResult.Value, Is.TypeOf<ForecastDTO>());
    }

    [Test]
    public async Task GetForecast_Returns503_WhenThresholdIsNull()
    {
        _mockSensorDataService.Setup(s => s.getSoilHumiLowerThresholdAsync()).ReturnsAsync((double?)null);

        var result = await _controller.GetForecast();

        var statusResult = result as ObjectResult;
        Assert.That(statusResult?.StatusCode, Is.EqualTo(503));
    }

    [Test]
    public async Task GetForecast_Returns502_WhenForecastIsNull()
    {
        _mockSensorDataService.Setup(s => s.getSoilHumiLowerThresholdAsync()).ReturnsAsync(50.0);
        _mockPredictionService.Setup(p => p.GetPredictionAsync(50.0)).ReturnsAsync((ForecastDTO?)null);

        var result = await _controller.GetForecast();

        var statusResult = result as ObjectResult;
        Assert.That(statusResult?.StatusCode, Is.EqualTo(502));
    }

    [Test]
    public async Task GetForecast_Returns500_WhenExceptionIsThrown()
    {
        _mockSensorDataService.Setup(s => s.getSoilHumiLowerThresholdAsync()).ThrowsAsync(new Exception("fail"));

        var result = await _controller.GetForecast();

        var statusResult = result as ObjectResult;
        Assert.That(statusResult?.StatusCode, Is.EqualTo(500));
    }
}
