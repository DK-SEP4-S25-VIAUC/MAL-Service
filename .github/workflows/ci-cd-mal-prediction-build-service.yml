name: CI/CD Pipeline (MAL Prediction Build Service)

on:
  workflow_run:
    workflows: ["Run Tests with Coverage (MAL-Microservice)"]
    types:
      - completed
      
  workflow_dispatch:

jobs:
  test-and-deploy:
    # Ensure this workflow only runs when changes to the main branch happen, and after the dotnet tests execution workflow has passed.
    if: |
      (
        github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
      ) || (
        github.event_name == 'workflow_run' &&
        github.event.workflow_run.conclusion == 'success' &&
        github.event.workflow_run.head_branch == 'main'
      )
    runs-on: ubuntu-latest
    permissions: 
      id-token: write
      contents: read

      
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4


      # Determine if any changes happened in this micro-services files in latest commit.
      - name: Determine changed files (only for workflow_run)
        if: github.event_name != 'workflow_dispatch'
        id: changes
        run: |
          echo "CHANGED=$(git diff-tree --no-commit-id --name-only -r ${{ github.event.workflow_run.head_sha }} | grep '^dotnet/MAL-Prediction-Build-Service/' || true)" >> "$GITHUB_OUTPUT"


      # If no changes to repository files were found, end the workflow without deploying.
      - name: Stop if no relevant changes (only for workflow_run)
        if: github.event_name != 'workflow_dispatch' && steps.changes.outputs.CHANGED == ''
        run: echo "No changes in MAL-Prediction-Build-Service. Skipping build and deploy." && exit 0


      # Set up .NET environment
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'


      # Cache any NuGet Packages for improved workflow run-time.
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-


      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore dotnet/MAL-Microservice.sln


      # Execute any tests for this micro-service: Uncommented since tests must pass/succeed in the dependent workflow.
      #- name: Run tests
      #  run: dotnet test dotnet/MAL-Microservice.sln --configuration Release --verbosity normal


      # Log in to DockerHub, so we have access to the place to deploy this image.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}


      # Setup the Docker Image builder
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3


      # Build the micro-service into a Docker Image, and push to Docker Hub.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: dotnet
          file: dotnet/MAL-Prediction-Build-Service/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/mal-prediction-build-service:latest

      # Log in to Azure.
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.MALPREDICTIONBUILDSERVICE_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.MALPREDICTIONBUILDSERVICE_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.MALPREDICTIONBUILDSERVICE_AZURE_SUBSCRIPTION_ID }}


      # Tell Azure to pull the Docker Image into its running container app.
      - name: Deploy to Container App
        run: |
          az containerapp update \
            --name mal-prediction-build-service \
            --resource-group SEP4_MAL_team \
            --image ${{ secrets.DOCKERHUB_USERNAME }}/mal-prediction-build-service:latest

